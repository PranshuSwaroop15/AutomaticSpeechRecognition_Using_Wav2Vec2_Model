# -*- coding: utf-8 -*-
"""AutomaticSpeechRecognitionUsingWav2Vec2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19VD3Cu6WC7FOOEeXY94BpZR-1HOlze2P

# **Importing Dependencies**
"""

import torch

import torchaudio

print(torch.__version__)
print(torchaudio.__version__)

torch.random.manual_seed(0)
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

print(device)

"""# 2.Uploading the DataFiles"""

from google.colab import drive
drive.mount('/content/drive')

import IPython
import matplotlib.pyplot as plt
from torchaudio.utils import download_asset
import librosa
import librosa.display

SPEECH_FILE = download_asset("/content/Voice-Overs in 60 Seconds.wav")

pipeline = torchaudio.pipelines.WAV2VEC2_ASR_BASE_960H

print("Sample Rate:", pipeline.sample_rate)

print("Labels:", pipeline.get_labels())

model = pipeline.get_model().to(device)

print(model.__class__)

IPython.display.Audio(SPEECH_FILE)

waveform, sample_rate = torchaudio.load(SPEECH_FILE)
waveform = waveform.to(device)

if sample_rate != pipeline.sample_rate:
    waveform = torchaudio.functional.resample(waveform, sample_rate, pipeline.sample_rate)

with torch.inference_mode():
    features, _ = model.extract_features(waveform)

fig, ax = plt.subplots(len(features), 1, figsize=(16, 4.3 * len(features)))
for i, feats in enumerate(features):
    ax[i].imshow(feats[0].cpu(), interpolation="nearest")
    ax[i].set_title(f"Feature from transformer layer {i+1}")
    ax[i].set_xlabel("Feature dimension")
    ax[i].set_ylabel("Frame (time-axis)")
fig.tight_layout()

with torch.inference_mode():
    emission, _ = model(waveform)

plt.imshow(emission[0].cpu().T, interpolation="nearest")
plt.title("Classification result")
plt.xlabel("Frame (time-axis)")
plt.ylabel("Class")
plt.tight_layout()
print("Class labels:", pipeline.get_labels())

class GreedyCTCDecoder(torch.nn.Module):
    def __init__(self, labels, blank=0):
        super().__init__()
        self.labels = labels
        self.blank = blank

    def forward(self, emission: torch.Tensor) -> str:
        """Given a sequence emission over labels, get the best path string
        Args:
          emission (Tensor): Logit tensors. Shape `[num_seq, num_label]`.

        Returns:
          str: The resulting transcript
        """
        indices = torch.argmax(emission, dim=-1)  # [num_seq,]
        indices = torch.unique_consecutive(indices, dim=-1)
        indices = [i for i in indices if i != self.blank]
        return "".join([self.labels[i] for i in indices])

decoder = GreedyCTCDecoder(labels=pipeline.get_labels())
transcript = decoder(emission[0])

print(transcript)
IPython.display.Audio(SPEECH_FILE)

!pip install gradio

!pip install gradio torch torchaudio transformers

import gradio as gr
import torch
from transformers import Wav2Vec2ForCTC, Wav2Vec2Processor
import torchaudio
import multiprocessing as mp

# Load the Wav2Vec2 model and processor
model_name = "facebook/wav2vec2-base-960h"
processor = Wav2Vec2Processor.from_pretrained(model_name)
model = Wav2Vec2ForCTC.from_pretrained(model_name)

# Function to process a single chunk of audio
def process_chunk(chunk, sample_rate):
    # Resample the audio to 16000 Hz if necessary
    if sample_rate != 16000:
        resampler = torchaudio.transforms.Resample(orig_freq=sample_rate, new_freq=16000)
        chunk = resampler(chunk)

    # Ensure the audio is in the correct format
    chunk = chunk.squeeze().numpy()

    # Process the audio to the format expected by the model
    input_values = processor(chunk, sampling_rate=16000, return_tensors="pt").input_values

    # Perform inference
    with torch.no_grad():
        logits = model(input_values).logits

    # Decode the logits to get the predicted text
    predicted_ids = torch.argmax(logits, dim=-1)
    transcription = processor.batch_decode(predicted_ids)[0]

    return transcription

# Function to perform speech recognition on the entire audio
def speech_recognition(audio_path):
    # Load the audio file
    waveform, sample_rate = torchaudio.load(audio_path)

    # Split the waveform into chunks of 30 seconds
    chunk_length = 30 * sample_rate  # 30 seconds in samples
    chunks = [waveform[:, i:i + chunk_length] for i in range(0, waveform.size(1), chunk_length)]

    # Use multiprocessing to process chunks in parallel
    with mp.Pool(mp.cpu_count()) as pool:
        results = pool.starmap(process_chunk, [(chunk, sample_rate) for chunk in chunks])

    # Combine the transcriptions
    transcription = " ".join(results)

    return transcription.strip()

# Create the Gradio interface
inputs = gr.Audio(type="filepath", label="Input Audio")
outputs = gr.Textbox(label="Transcription")

interface = gr.Interface(
    fn=speech_recognition,
    inputs=inputs,
    outputs=outputs,
    title="Speech Recognition using Wav2Vec2",
    description="Upload a audio file or record the audio to get the transcription using the Wav2Vec2 model.",
    article="This assignement is developed by Pranshu Swaroop",
)

# Launch the interface
if __name__ == "__main__":
    interface.launch()

